// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: blxr-mev.proto

package relay_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Relay_SubmitBlock_FullMethodName       = "/Relay/SubmitBlock"
	Relay_RegisterValidator_FullMethodName = "/Relay/RegisterValidator"
	Relay_GetHeader_FullMethodName         = "/Relay/GetHeader"
	Relay_GetPayload_FullMethodName        = "/Relay/GetPayload"
	Relay_StreamHeader_FullMethodName      = "/Relay/StreamHeader"
)

// RelayClient is the client API for Relay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayClient interface {
	SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
	RegisterValidator(ctx context.Context, in *RegisterValidatorRequest, opts ...grpc.CallOption) (*RegisterValidatorResponse, error)
	GetHeader(ctx context.Context, in *GetHeaderRequest, opts ...grpc.CallOption) (*GetHeaderResponse, error)
	GetPayload(ctx context.Context, in *GetPayloadRequest, opts ...grpc.CallOption) (*GetPayloadResponse, error)
	StreamHeader(ctx context.Context, in *StreamHeaderRequest, opts ...grpc.CallOption) (Relay_StreamHeaderClient, error)
}

type relayClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayClient(cc grpc.ClientConnInterface) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, Relay_SubmitBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) RegisterValidator(ctx context.Context, in *RegisterValidatorRequest, opts ...grpc.CallOption) (*RegisterValidatorResponse, error) {
	out := new(RegisterValidatorResponse)
	err := c.cc.Invoke(ctx, Relay_RegisterValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) GetHeader(ctx context.Context, in *GetHeaderRequest, opts ...grpc.CallOption) (*GetHeaderResponse, error) {
	out := new(GetHeaderResponse)
	err := c.cc.Invoke(ctx, Relay_GetHeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) GetPayload(ctx context.Context, in *GetPayloadRequest, opts ...grpc.CallOption) (*GetPayloadResponse, error) {
	out := new(GetPayloadResponse)
	err := c.cc.Invoke(ctx, Relay_GetPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) StreamHeader(ctx context.Context, in *StreamHeaderRequest, opts ...grpc.CallOption) (Relay_StreamHeaderClient, error) {
	stream, err := c.cc.NewStream(ctx, &Relay_ServiceDesc.Streams[0], Relay_StreamHeader_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &relayStreamHeaderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Relay_StreamHeaderClient interface {
	Recv() (*StreamHeaderResponse, error)
	grpc.ClientStream
}

type relayStreamHeaderClient struct {
	grpc.ClientStream
}

func (x *relayStreamHeaderClient) Recv() (*StreamHeaderResponse, error) {
	m := new(StreamHeaderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelayServer is the server API for Relay service.
// All implementations must embed UnimplementedRelayServer
// for forward compatibility
type RelayServer interface {
	SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error)
	RegisterValidator(context.Context, *RegisterValidatorRequest) (*RegisterValidatorResponse, error)
	GetHeader(context.Context, *GetHeaderRequest) (*GetHeaderResponse, error)
	GetPayload(context.Context, *GetPayloadRequest) (*GetPayloadResponse, error)
	StreamHeader(*StreamHeaderRequest, Relay_StreamHeaderServer) error
	mustEmbedUnimplementedRelayServer()
}

// UnimplementedRelayServer must be embedded to have forward compatible implementations.
type UnimplementedRelayServer struct {
}

func (UnimplementedRelayServer) SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedRelayServer) RegisterValidator(context.Context, *RegisterValidatorRequest) (*RegisterValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterValidator not implemented")
}
func (UnimplementedRelayServer) GetHeader(context.Context, *GetHeaderRequest) (*GetHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeader not implemented")
}
func (UnimplementedRelayServer) GetPayload(context.Context, *GetPayloadRequest) (*GetPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayload not implemented")
}
func (UnimplementedRelayServer) StreamHeader(*StreamHeaderRequest, Relay_StreamHeaderServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHeader not implemented")
}
func (UnimplementedRelayServer) mustEmbedUnimplementedRelayServer() {}

// UnsafeRelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayServer will
// result in compilation errors.
type UnsafeRelayServer interface {
	mustEmbedUnimplementedRelayServer()
}

func RegisterRelayServer(s grpc.ServiceRegistrar, srv RelayServer) {
	s.RegisterService(&Relay_ServiceDesc, srv)
}

func _Relay_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_SubmitBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).SubmitBlock(ctx, req.(*SubmitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_RegisterValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).RegisterValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_RegisterValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).RegisterValidator(ctx, req.(*RegisterValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_GetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).GetHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_GetHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).GetHeader(ctx, req.(*GetHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_GetPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).GetPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_GetPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).GetPayload(ctx, req.(*GetPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_StreamHeader_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamHeaderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RelayServer).StreamHeader(m, &relayStreamHeaderServer{stream})
}

type Relay_StreamHeaderServer interface {
	Send(*StreamHeaderResponse) error
	grpc.ServerStream
}

type relayStreamHeaderServer struct {
	grpc.ServerStream
}

func (x *relayStreamHeaderServer) Send(m *StreamHeaderResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Relay_ServiceDesc is the grpc.ServiceDesc for Relay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Relay",
	HandlerType: (*RelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlock",
			Handler:    _Relay_SubmitBlock_Handler,
		},
		{
			MethodName: "RegisterValidator",
			Handler:    _Relay_RegisterValidator_Handler,
		},
		{
			MethodName: "GetHeader",
			Handler:    _Relay_GetHeader_Handler,
		},
		{
			MethodName: "GetPayload",
			Handler:    _Relay_GetPayload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHeader",
			Handler:       _Relay_StreamHeader_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blxr-mev.proto",
}
