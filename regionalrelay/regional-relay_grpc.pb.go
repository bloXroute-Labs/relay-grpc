// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: regional-relay.proto

package regionalrelay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegionalRelay_SubmitBlock_FullMethodName = "/RegionalRelay/SubmitBlock"
)

// RegionalRelayClient is the client API for RegionalRelay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegionalRelayClient interface {
	SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
}

type regionalRelayClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionalRelayClient(cc grpc.ClientConnInterface) RegionalRelayClient {
	return &regionalRelayClient{cc}
}

func (c *regionalRelayClient) SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, RegionalRelay_SubmitBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionalRelayServer is the server API for RegionalRelay service.
// All implementations must embed UnimplementedRegionalRelayServer
// for forward compatibility
type RegionalRelayServer interface {
	SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error)
	mustEmbedUnimplementedRegionalRelayServer()
}

// UnimplementedRegionalRelayServer must be embedded to have forward compatible implementations.
type UnimplementedRegionalRelayServer struct {
}

func (UnimplementedRegionalRelayServer) SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedRegionalRelayServer) mustEmbedUnimplementedRegionalRelayServer() {}

// UnsafeRegionalRelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegionalRelayServer will
// result in compilation errors.
type UnsafeRegionalRelayServer interface {
	mustEmbedUnimplementedRegionalRelayServer()
}

func RegisterRegionalRelayServer(s grpc.ServiceRegistrar, srv RegionalRelayServer) {
	s.RegisterService(&RegionalRelay_ServiceDesc, srv)
}

func _RegionalRelay_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionalRelayServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegionalRelay_SubmitBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionalRelayServer).SubmitBlock(ctx, req.(*SubmitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegionalRelay_ServiceDesc is the grpc.ServiceDesc for RegionalRelay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegionalRelay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RegionalRelay",
	HandlerType: (*RegionalRelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlock",
			Handler:    _RegionalRelay_SubmitBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regional-relay.proto",
}
